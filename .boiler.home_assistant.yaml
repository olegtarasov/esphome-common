sensor:
  # HA sensors
  - platform: homeassistant
    id: temp_min_room_temp
    entity_id: ${ha_room_climate_entity}
    attribute: current_temperature
    on_value:
      then:
        - lambda: |-
            if (id(final_pid_ha).state) {
              id(temp_input).publish_state(x);
            }
  - platform: homeassistant
    id: ha_pid_output
    entity_id: ${ha_master_pid_output_entity}
    on_value:
      then:
        - lambda: |-
            id(send_ha_pid).execute();
  - platform: homeassistant
    id: ha_room_setpoint
    entity_id: ${ha_room_climate_entity}
    attribute: temperature
    on_value:
      then:
        - lambda: |-
            if (isnan(x))
              return;
            auto call = id(internal_pid)->make_call();
            call.set_target_temperature(x);
            call.perform();

binary_sensor:
  # HA connection status
  - platform: status
    id: ha_status
    name: "HA Connection Status"
  - platform: template
    id: final_pid_ha
    name: "Using HA PID"
    entity_category: diagnostic
    lambda: |-
      return id(ha_status).state && id(use_ha_thermostat).state && !isnan(id(ha_pid_output).state);
    on_state:
      then:
        lambda: |-
          if (x) {
            id(temp_input).publish_state(id(temp_min_room_temp).state);
          } else {
            id(temp_input).publish_state(id(temp_room).state);
          }

switch:
  - platform: template
    name: "Use Home Assistant Thermostat"
    id: use_ha_thermostat
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

script:
  - id: send_ha_pid
    then:
      - lambda: |-
          if (id(final_pid_ha).state && id(internal_pid).mode == CLIMATE_MODE_HEAT) {
            float value = id(ha_pid_output).state;

            // Additional check if value changed from when final_pid_ha was last recalculated
            if (isnan(value)) {
              ESP_LOGW("pid_ha", "HA PID Output is NaN, will not send to OpenTherm");
              return;
            }

            ESP_LOGD("pid_ha", "Sending HA PID output to OpenTherm: %.2f", value);
            id(ch_setpoint).write_state(value);
            id(final_pid_output).publish_state(value);
          }
